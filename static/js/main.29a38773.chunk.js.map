{"version":3,"sources":["state/store/index.js","serviceWorker.js","view/Pages/LogInPage/StyledLogInPage.jsx","view/Pages/LogInPage/components/FormComponent.jsx","view/Pages/LogInPage/LogInPage.jsx","view/Pages/AdminPanelPage/AdminPanelPage.jsx","index.js"],"names":["store","configureStore","reducer","Boolean","window","location","hostname","match","StyledLogInPage","styled","div","Form","props","state","username","password","className","type","to","React","Component","LoginPage","AdminPanelPage","ReactDOM","render","StrictMode","from","exact","path","component","LogInPage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAEaA,EAAQC,YAAe,CAClCC,QAAS,K,QCSSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6DChBOC,E,MAAkBC,EAAOC,IAAV,wjB,OCEPC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,GACVC,SAAU,IAJK,E,0CAOnB,WACE,OACE,qBAAKC,UAAU,eAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,iCACE,uBAAOC,KAAK,SACZ,uBAAOA,KAAK,YAEd,cAAC,IAAD,CAAMC,GAAG,cAAT,qC,GAhBwBC,IAAMC,WCAnBC,E,4JACnB,WACE,OACE,cAACb,EAAD,UACE,cAAC,EAAD,U,GAJ+BW,IAAMC,WCFxBE,E,4JACnB,WACE,OAAO,iD,GAFiCH,IAAMC,WCclDG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUzB,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAU0B,KAAK,mBAAmBR,GAAG,MACrC,cAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,cAAC,IAAD,CAAOF,KAAK,eAAeC,UAAWP,aAM9CS,SAASC,eAAe,SLsGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.29a38773.chunk.js","sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\n\nexport const store = configureStore({\n  reducer: {\n    // counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import styled from \"styled-components\";\r\n\r\nexport const StyledLogInPage = styled.div`\r\n  min-width: 720px;\r\n  max-width: 720px;\r\n  max-height: 100vh;\r\n  min-height: 100vh;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  .form-wrapper {\r\n    padding-left: 200px;\r\n    padding-right: 200px;\r\n    flex: 1;\r\n    .form-container {\r\n      box-shadow: 0 3px 4px rgba(0, 0, 0, 0.16), 0 3px 4px rgba(0, 0, 0, 0.23);\r\n      background-color: #fcfcfc;\r\n      border-radius: 5px;\r\n      padding: 35px;\r\n      form {\r\n        display: flex;\r\n        flex-direction: column;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Form extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"form-wrapper\">\r\n        <div className=\"form-container\">\r\n          <form>\r\n            <input type=\"text\" />\r\n            <input type=\"text\" />\r\n          </form>\r\n          <Link to=\"admin-panel\">to Admin Panel</Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { StyledLogInPage } from \"./StyledLogInPage\";\r\nimport Form from \"./components/FormComponent\";\r\n\r\nexport default class LoginPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <StyledLogInPage>\r\n        <Form />\r\n      </StyledLogInPage>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class AdminPanelPage extends React.Component {\r\n  render() {\r\n    return <h1>Admin Panel</h1>;\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import Root from \"./view/Root\";\nimport { store } from \"./state/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport LogInPage from \"./view/Pages/LogInPage/LogInPage\";\nimport AdminPanelPage from \"./view/Pages/AdminPanelPage/AdminPanelPage\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Redirect from=\"/admin-panel-app\" to=\"/\" />\n          <Route exact path=\"/\" component={LogInPage} />\n          <Route path=\"/admin-panel\" component={AdminPanelPage} />\n        </Switch>\n      </Router>\n      {/* <Root /> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}